{#

------ MESSAGE PARSING ------

#}
{%- set system = namespace(value="") %}
{%- set allDocuments = namespace(rendered="", count=0)%}
{%- set thinkingVar = namespace(enabled=thinking or false) %}
{%- set controls = controls or {} %}
{%- set citationsVar = namespace(enabled='citations' in controls or false) %}
{%- set hallucinationsVar = namespace(enabled='hallucinations' in controls or false) -%}
{%- set lengthVar = namespace(value=controls.length if 'length' in controls else '') -%}
{%- set originalityVar = namespace(value=controls.originality if 'originality' in controls else '') -%}

{# Alias tools -> available_tools #}
{%- if tools and not available_tools -%}
    {%- set available_tools = tools -%}
{%- endif -%}

{# Expand kwarg-provided documents #}
{%- for document in (documents or []) -%}
    {%- if allDocuments.count > 0 %}
        {%- set allDocuments.rendered = allDocuments.rendered + '\n' %}
    {%- endif %}
    {%- set allDocuments.rendered = allDocuments.rendered + '<|start_of_role|>document {"document_id": "' %}
    {%- if 'doc_id' in document %}
        {%- set allDocuments.rendered = allDocuments.rendered + document['doc_id'] %}
    {%- elif 'title' in document %}
        {%- set allDocuments.rendered = allDocuments.rendered + document['title'] %}
    {%- else %}
        {%- set allDocuments.rendered = allDocuments.rendered + allDocuments.count | string %}
    {%- endif %}
    {%- set allDocuments.rendered = allDocuments.rendered + '"}<|end_of_role>\n' + document['text'] + '<|end_of_text|>\n' %}
    {%- set allDocuments.count = allDocuments.count + 1 %}
{%- endfor -%}

{# Look through all messages and handle special roles #}
{%- for message in messages -%}
    {# User defined system prompt #}
    {%- if message['role'] == 'system' %}
        {%- set system.value = message['content'] %}
    {%- endif -%}

    {# Role specified controls #}
    {%- if message['role'].startswith('control')%}
        {%- if message['content'] == 'thinking'%}
            {%- set thinkingVar.enabled = true %}
        {%- endif %}
        {%- if message['content'] == 'citations'%}
            {%- set citationsVar.enabled = true %}
        {%- endif %}
        {%- if message['content'] == 'hallucinations'%}
            {%- set hallucinationsVar.enabled = true %}
        {%- endif %}
        {%- if ( message['content'].startswith('length ') )%}
            {%- set lengthVar.value = message['content'][7:] %}
        {%- endif %}
        {%- if ( message['content'].startswith('originality ') )%}
            {%- set originalityVar.value = message['content'][12:] %}
        {%- endif %}
    {%- endif -%}

    {# Role specified document #}
    {%- if (message['role'].startswith('document')) %}
        {%- if allDocuments.count > 0 %}
            {%- set allDocuments.rendered = allDocuments.rendered + '\n' %}
        {%- endif %}
        {%- set allDocuments.rendered = allDocuments.rendered + '<|start_of_role|>document {"document_id": "' %}
        {%- if 'doc_id' in message %}
            {%- set allDocuments.rendered = allDocuments.rendered + message['doc_id'] %}
        {%- elif 'title' in message %}
            {%- set allDocuments.rendered = allDocuments.rendered + message['title'] %}
        {%- else %}
            {%- set title = message['role'][8:].strip() %}
            {%- if not title %}
                {%- set title = allDocuments.count | string %}
            {%- endif %}
            {%- set allDocuments.rendered = allDocuments.rendered + title %}
        {%- endif %}
        {%- set allDocuments.rendered = allDocuments.rendered + '"}<|end_of_role|>\n' + message['content'] + '<|end_of_text|>\n' %}
        {%- set allDocuments.count = allDocuments.count + 1 %}
    {%- endif %}
{%- endfor -%}

{# Build default system prompt if not set #}
{%- if not system.value %}
    {%- set system.value = "Knowledge Cutoff Date: April 2024.
Today's Date: " + strftime_now('%B %d, %Y') + ". You are Granite, developed by IBM." %}
    {%- if available_tools and allDocuments.rendered %}
        {%- set system.value = system.value + " You are a helpful assistant with access to the following tools. When a tool is required to answer the user's query, respond only with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request.
Write the response to the user's input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}
    {%- elif tools %}
        {%- set system.value = system.value + " You are a helpful assistant with access to the following tools. When a tool is required to answer the user's query, respond only with <|tool_call|> followed by a JSON list of tools used. If a tool does not exist in the provided list of tools, notify the user that you do not have the ability to fulfill the request." %}
    {%- elif allDocuments.rendered %}
        {%- set system.value = system.value + " Write the response to the user's input by strictly aligning with the facts in the provided documents. If the information needed to answer the question is not available in the documents, inform the user that the question cannot be answered based on the available data." %}
    {%- elif thinkingVar.enabled %}
        {%- set system.value = system.value + " You are a helpful AI assistant.
Respond to every user query in a comprehensive and detailed way. You can write down your thoughts and reasoning process before responding. In the thought process, engage in a comprehensive cycle of analysis, summarization, exploration, reassessment, reflection, backtracing, and iteration to develop well-considered thinking process. In the response section, based on various attempts, explorations, and reflections from the thoughts section, systematically present the final solution that you deem correct. The response should summarize the thought process. Write your thoughts between <think></think> and write your response between <response></response> for each user query." %}
    {%- else %}
        {%- set system.value = system.value + " You are a helpful AI assistant." %}
    {%- endif %}
    {%- if allDocuments.rendered and citationsVar.enabled %}
        {%- set system.value = system.value + '
Use the symbols <|start_of_cite|> and <|end_of_cite|> to indicate when a fact comes from a document in the search result, e.g <|start_of_cite|> {document_id: 1}my fact <|end_of_cite|> for a fact from document 1. Afterwards, list all the citations with their corresponding documents in an ordered list.' %}
    {%- endif %}
    {%- if allDocuments.rendered and hallucinationsVar.enabled %}
        {%- set system.value = system.value + '
Finally, after the response is written, include a numbered list of sentences from the response with a corresponding risk value that are hallucinated and not based in the documents.' %}
    {%- endif %}
{%- endif -%}
{#

------ TEMPLATE EXPANSION ------

#}
{{- '<|start_of_role|>system<|end_of_role|>' + system.value + '<|end_of_text|>
' }}
{%- if available_tools %}
    {{- '<|start_of_role|>available_tools<|end_of_role|>' }}
    {{- available_tools | tojson(indent=4) }}
    {{- '<|end_of_text|>
' }}
{%- endif %}
{%- if allDocuments.rendered %}
    {{- allDocuments.rendered }}
{%- endif %}
{%- for message in messages %}
    {%- set content = message.content or "" -%}
    {%- if (
        message['role'] not in ['system', 'document', 'control', 'assistant', 'tool'] and
        not message['role'].startswith('document') and
        not message['role'].startswith('control')
    ) %}
        {{- '<|start_of_role|>' + message['role'] + '<|end_of_role|>' + content + '<|end_of_text|>\n' }}
    {%- elif message.role == 'assistant' %}
        {%- if message.tool_calls %}
            {{- '<|start_of_role|>' + message['role'] + '<|end_of_role|><|tool_call|>[' }}
            {%- for tool_call in message.tool_calls %}
                {%- if tool_call.function %}
                    {%- set tool_call = tool_call.function %}
                {%- endif %}
                {{- '{"name": "' }}
                {{- tool_call.name }}
                {{- '", "arguments": ' }}
                {%- if tool_call.arguments is string %}
                    {{- tool_call.arguments }}
                {%- else %}
                    {{- tool_call.arguments | tojson }}
                {%- endif %}
                {% if not loop.last %}
                    {{- '},' }}
                {% endif %}
            {%- endfor %}
            {{- '}]<|end_of_text|>\n' }}
        {%- else %}
            {{- '<|start_of_role|>' + message['role'] + '<|end_of_role|>' + content + '<|end_of_text|>\n' }}
        {%- endif %}
    {%- elif message.role == 'tool' %}
        {{- '<|start_of_role|>tool_response<|end_of_role|>' + content + '<|end_of_text|>\n' }}
    {%- endif %}
    {%- if loop.last and add_generation_prompt -%}
        {{- '<|start_of_role|>assistant' }}
            {%- if lengthVar.value and originalityVar.value %}
                {{- ' ' + {'length': lengthVar.value, 'originality': originalityVar.value} | tojson() }}
            {%- elif lengthVar.value %}
                {{- ' ' + {'length': lengthVar.value} | tojson() }}
            {%- elif originalityVar.value %}
                {{- ' ' + {'originality': originalityVar.value} | tojson() }}
            {%- endif %}
        {{- '<|end_of_role|>' }}
    {%- endif %}
{%- endfor %}
